// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  HR
}

enum DocumentType {
  JOB_CONFIRMATION
  SALARY_CONFIRMATION
  SALARY_SLIP
}

enum DocumentStatus {
  PENDING
  CANCELLED
  PROCESSING
  DELIVERED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum LeaveType {
  ANNUAL
  CASUAL
  MEDICAL
}


model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  role              Role
  image             String             @default("/images/user.jpg")
  phone             String?            // Optional contact number
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  profile           EmployeeProfile?
  chatThread        ChatThread?
  leaveRequests     LeaveRequest[]     @relation("LeaveRequests")
  approvedLeaves    LeaveRequest[]     @relation("ApprovedLeaves")
  leaveBalance      LeaveBalance?
  documentRequests  DocumentRequest[]  @relation("DocRequests")
  deliveredDocuments DocumentRequest[] @relation("DeliveredDocs")
  sentNotifications Notification[]


  @@map("users")
}

model EmployeeProfile {
  id             String   @id @default(uuid())
  userId         String   @unique
  firstName      String
  lastName       String
  nic            String   @unique
  joinedDate     DateTime
  designation    String
  jobDescription String
  address        String?
  updatedAt      DateTime         @updatedAt

  user           User     @relation(fields: [userId], references: [id])

  @@map("employee_profiles")
}

model Notification {
  id           String   @id @default(uuid())
  title        String
  message      String
  isRead       Boolean  @default(false)
  senderId     String
  relatedType  String?  // Optional: 'leave' or 'document'
  relatedId    String?  // Optional: ID of the related request
  createdAt    DateTime @default(now())

  sender       User     @relation(fields: [senderId], references: [id])

  @@map("notifications")
}

model LeaveRequest {
  id          String      @id @default(uuid())
  userId      String
  type        LeaveType
  fromDate    DateTime
  toDate      DateTime
  reason      String
  status      LeaveStatus @default(PENDING)
  approvedBy  String?     // HR userId
  note        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation("LeaveRequests", fields: [userId], references: [id])
  approver    User?       @relation("ApprovedLeaves", fields: [approvedBy], references: [id])

  @@map("leave_requests")
}

model LeaveBalance {
  id          String   @id @default(uuid())
  userId      String   @unique
  annual      Int
  casual      Int
  medical     Int
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("leave_balances")
}

model DocumentRequest {
  id             String          @id @default(uuid())
  userId         String
  type           DocumentType
  status         DocumentStatus  @default(PENDING)
  reason         String?
  deliveredBy    String?
  requestedDate  DateTime        @default(now())
  deliveredDate  DateTime?
  softCopyUrl    String?

  user           User            @relation("DocRequests", fields: [userId], references: [id])
  deliverer      User?           @relation("DeliveredDocs", fields: [deliveredBy], references: [id])

  @@map("document_requests")
}

model ChatThread {
  id         String   @id @default(uuid())
  userId     String   @unique
  threadId   String   @unique
  lastUsedAt DateTime @updatedAt
  isActive   Boolean  @default(true)

  user       User     @relation(fields: [userId], references: [id])

  @@map("chat_threads")
}

